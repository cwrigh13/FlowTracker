name: CI - Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: frontend
          name: frontend-${{ matrix.node-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: flowtracker_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: flowtracker_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run TypeScript check
        working-directory: ./backend
        run: npx tsc --noEmit

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U flowtracker_test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://flowtracker_test:test_password@localhost:5432/flowtracker_test
          NODE_ENV: test
        run: |
          npm run build
          node dist/database/migrate.js || echo "Migrations not found, skipping..."

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://flowtracker_test:test_password@localhost:5432/flowtracker_test
          JWT_SECRET: test_jwt_secret_key_for_ci
          NODE_ENV: test
          SMTP_HOST: localhost
          SMTP_PORT: 587
          SMTP_USER: test@example.com
          SMTP_PASS: test_password
          FROM_EMAIL: noreply@flowtracker.test
          CORS_ORIGIN: http://localhost:3000
          FRONTEND_URL: http://localhost:3000
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-${{ matrix.node-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: flowtracker-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: flowtracker-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (Frontend)
        run: npm audit --audit-level=moderate || true

      - name: Run npm audit (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=moderate || true

      - name: Check for critical vulnerabilities (Frontend)
        run: |
          if npm audit --audit-level=critical --json | grep -q '"critical":[1-9]'; then
            echo "Critical vulnerabilities found in frontend!"
            npm audit --audit-level=critical
            exit 1
          fi

      - name: Check for critical vulnerabilities (Backend)
        working-directory: ./backend
        run: |
          if npm audit --audit-level=critical --json | grep -q '"critical":[1-9]'; then
            echo "Critical vulnerabilities found in backend!"
            npm audit --audit-level=critical
            exit 1
          fi

